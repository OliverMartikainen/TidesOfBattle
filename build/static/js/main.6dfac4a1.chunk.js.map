{"version":3,"sources":["services/tokenManager.js","resources/one_sword_lite.jpg","resources/one_tower_lite.jpg","resources/zero_lite.jpg","resources/zero_skull_lite.jpg","resources/two_lite.jpg","resources/three_lite.jpg","resources/backside_lite.jpg","components/TideCard.js","components/NativeSelector.js","utils/config.js","services/cards.js","services/users.js","resources/taDa.mp3","components/TideCards.js","App.js","index.js"],"names":["TOKEN","TIDE_CARDS_DATA","zero","zero_skull","one_sword","one_tower","two","three","TideCard","card","username","handleSelect","className","cardName","cardOwner","cardIndex","img","backside","alt","style","backgroundColor","onDoubleClick","src","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","NativeSelector","value","valueOptions","label","handleChange","disabled","classes","options","map","v","labelLower","toLowerCase","htmlFor","FormControl","InputLabel","shrink","NativeSelect","onChange","event","target","inputProps","name","id","setToken","token","getAuthHeader","headers","Authorization","console","log","process","SERVICE_URL","config","select","a","authHeader","axios","post","res","data","error","cardsSSE","EventSource","forceEnd","get","status","nosword","initialLoad","selectedCards","ownCards","othersCards","swordOwner","login","usernames","stats","changeSwordUser","newSwordUser","addUser","CardSubHandler","setCardStates","cardSub","cardsService","onopen","onerror","close","setTimeout","onmessage","msgObj","JSON","parse","msg","state","cards","filter","c","ownLastCard","length","waitingForSword","endState","selectOrder","cardsArray","soundPlayed","playerOrderNew","selectOrderNew","doneBy","sseMsgActions","SwordUserSelector","cardStates","isSwordOwner","usersService","usernameOptions","i","push","TideCards","logout","useState","defaultState","isFrozeState","useEffect","forEach","initThing","handleCardSelect","ownCardsFiltered","cardInfo","handleSwordSkip","forceReset","cardComps","otherPlayersCards","Object","keys","reduce","obj","player","playerCards","playerCardsOrdered","playerSelectOrder","orderKnown","selectNumb","find","playerName","ownCardComps","othersCardsComps","values","cardsComp","borderRight","paddingRight","isSwordBtnEnabled","playSound","document","getElementsByClassName","play","frozenOwnCards","onClick","taDa","display","height","saveUser","localStorage","setItem","LoginScreen","setUsername","App","storedUser","getItem","Token","tokenManager","getDefaultUser","setUsernameOptions","fetchUsernames","clear","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6dfac4a1.chunk.js","sourcesContent":["let TOKEN\r\n\r\nexport const setToken = (token) => {\r\n    TOKEN = token ? `bearer ${token}` : null\r\n}\r\n\r\nexport const getAuthHeader = () => ({\r\n    headers: { Authorization: TOKEN }\r\n})\r\n\r\nexport default {\r\n    getAuthHeader,\r\n    setToken\r\n}","export default __webpack_public_path__ + \"static/media/one_sword_lite.4871870e.jpg\";","export default __webpack_public_path__ + \"static/media/one_tower_lite.5422d4d2.jpg\";","export default __webpack_public_path__ + \"static/media/zero_lite.09307b16.jpg\";","export default __webpack_public_path__ + \"static/media/zero_skull_lite.3d9aee36.jpg\";","export default __webpack_public_path__ + \"static/media/two_lite.e588a68b.jpg\";","export default __webpack_public_path__ + \"static/media/three_lite.0750c14f.jpg\";","export default __webpack_public_path__ + \"static/media/backside_lite.24c30a04.jpg\";","import one_sword from 'resources/one_sword_lite.jpg'\r\nimport one_tower from 'resources/one_tower_lite.jpg'\r\nimport zero from 'resources/zero_lite.jpg'\r\nimport zero_skull from 'resources/zero_skull_lite.jpg'\r\nimport two from 'resources/two_lite.jpg'\r\nimport three from 'resources/three_lite.jpg'\r\nimport backside from 'resources/backside_lite.jpg'\r\n\r\nconst TIDE_CARDS_DATA = {\r\n    'zero': zero,\r\n    'zero_skull': zero_skull,\r\n    'one_sword': one_sword,\r\n    'one_tower': one_tower,\r\n    'two': two,\r\n    'three': three\r\n}\r\n\r\nconst TideCard = ({ card, username, handleSelect, className = 'tidecard-wrap' }) => {\r\n    const { cardName, cardOwner, cardIndex } = card\r\n    const img = TIDE_CARDS_DATA[cardName] || backside\r\n    const alt = cardName || 'unknown'\r\n\r\n    const color = cardOwner ? ((cardOwner === username) ? 'red' : 'cyan') : null\r\n\r\n    const style = { backgroundColor: color } \r\n\r\n    return (\r\n        <div\r\n            className={className}\r\n            style={style}\r\n            onDoubleClick={() => handleSelect(cardIndex)}\r\n        >\r\n            <img className='tidecard' src={img} alt={alt} />\r\n            CardOwner: {cardOwner}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TideCard","import { makeStyles } from '@material-ui/core/styles'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport NativeSelect from '@material-ui/core/NativeSelect'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    }\r\n}))\r\n\r\nconst NativeSelector = ({ value, valueOptions, label, handleChange, disabled = false }) => {\r\n    const classes = useStyles()\r\n\r\n    const options = valueOptions.map(v => <option key={v} value={v}>{v}</option>)\r\n\r\n    const labelLower = label.toLowerCase()\r\n    const htmlFor = `${labelLower}-native-label-placeholder`\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel shrink htmlFor={htmlFor}>\r\n                    {label}\r\n                </InputLabel>\r\n                <NativeSelect\r\n                    disabled={disabled}\r\n                    value={value}\r\n                    onChange={(event) => handleChange(event.target.value)}\r\n                    inputProps={{\r\n                        name: labelLower,\r\n                        id: htmlFor,\r\n                    }}\r\n                >\r\n                    <option value={''}>None</option>\r\n                    {options}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NativeSelector","let baseUrl = './api'\r\n\r\nconsole.log(process.env.NODE_ENV, process.env.REACT_APP_BACKEND_URL)\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n    baseUrl = process.env.REACT_APP_BACKEND_URL || baseUrl\r\n}\r\n\r\n\r\nexport default { baseUrl }","import axios from 'axios'\r\nimport { getAuthHeader } from './tokenManager'\r\nimport config from 'utils/config'\r\n\r\nconst baseUrl = config.baseUrl\r\nconst SERVICE_URL = `${baseUrl}/cards`\r\n\r\n/**\r\n * \r\n * @param {Number} cardIndex \r\n * @returns {Promise<Object | null>}\r\n */\r\nconst select = async (cardIndex) => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.post(`${SERVICE_URL}/select`, { cardIndex }, authHeader)\r\n\r\n        const card = res.data\r\n\r\n        return card\r\n    } catch (error) {\r\n        console.error(error)\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns {Promise<Boolean>}\r\n */\r\nconst forceEnd = async () => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.get(`${SERVICE_URL}/forceEnd`, authHeader)\r\n        return (res.status === 204)\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n/**\r\n * @returns {Promise<Boolean>}\r\n */\r\nconst nosword = async () => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.get(`${SERVICE_URL}/nosword`, authHeader)\r\n        return (res.status === 204)\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n//card --> { cardIndex: Number, cardOwner: String, cardName: String }\r\n\r\n/**\r\n * \r\n * @returns {Promise<{ swordOwner: String, ownCards: Array, othersCards: Array } | null >}\r\n */\r\nconst initialLoad = async () => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.get(`${SERVICE_URL}/initialLoad`, authHeader)\r\n        const data = res.data\r\n        const { ownCards, othersCards } = data.selectedCards\r\n        return {\r\n            swordOwner: data.swordOwner,\r\n            ownCards: ownCards,\r\n            othersCards: othersCards\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error)\r\n        return null\r\n    }\r\n}\r\n\r\nconst cardsSSE = () => {\r\n    try {\r\n        const cardSub = new EventSource(`${SERVICE_URL}/sse`)\r\n        return cardSub\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nexport default {\r\n    cardsSSE,\r\n    forceEnd,\r\n    nosword,\r\n    select,\r\n    initialLoad\r\n}","import axios from 'axios'\r\nimport { getAuthHeader, setToken } from './tokenManager'\r\nimport config from 'utils/config'\r\n\r\nconst baseUrl = config.baseUrl\r\nconst SERVICE_URL = `${baseUrl}/users`\r\n\r\n/**\r\n * \r\n * @param {String} username \r\n * @returns {Promise<String | null>}\r\n */\r\nconst login = async (username) => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.post(`${SERVICE_URL}/login`, { username: username }, authHeader)\r\n\r\n        const { token } = res.data\r\n        if (!token) {\r\n            console.error(res)\r\n            return null\r\n        }\r\n        \r\n        setToken(token)\r\n        return token\r\n    } catch (error) {\r\n        console.error(error)\r\n        return null\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns {Promise<Array<String>>} usernames array\r\n */\r\nconst usernames = async () => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.get(`${SERVICE_URL}/usernames`, authHeader)\r\n        return res.data || []\r\n    } catch (error) {\r\n        console.error(error)\r\n        return ['FAILED TO GET USERNAMES - REFRESH PAGE']\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @returns {Promise<Object>} just <div><pre> object --> this. \r\n */\r\nconst stats = async () => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.get(`${SERVICE_URL}/stats`, authHeader)\r\n        return res\r\n    } catch (error) {\r\n        console.error(error)\r\n        return error\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} username newSword user username \r\n * @returns {Promise<Boolean>}\r\n */\r\nconst changeSwordUser = async (username) => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.post(`${SERVICE_URL}/changeSwordUser`, { newSwordUser: username }, authHeader)\r\n        return (res.status === 204)\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} username \r\n * @returns {Promise<Boolean>}\r\n */\r\nconst addUser = async (username) => {\r\n    try {\r\n        const authHeader = getAuthHeader()\r\n        const res = await axios.post(`${SERVICE_URL}/add`, { username: username }, authHeader)\r\n        return (res.status === 204)\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n}\r\n\r\nexport default {\r\n    login,\r\n    usernames,\r\n    stats,\r\n    changeSwordUser,\r\n    addUser\r\n}","export default __webpack_public_path__ + \"static/media/taDa.9cfbe32b.mp3\";","import { useEffect, useState } from 'react'\r\nimport TideCard from './TideCard'\r\nimport NativeSelector from './NativeSelector'\r\nimport cardsService from 'services/cards'\r\nimport usersService from 'services/users'\r\nimport taDa from 'resources/taDa.mp3'\r\n\r\n// --> improve game end/ new session start \r\n//--> store end result in other property, \r\n//show all that until state 'isFrozen' is reset with click? --> ownCards are null anyway\r\n\r\n\r\nconst sseMsgActions = (data, setCardStates) => {\r\n    try {\r\n        const msgObj = JSON.parse(data)\r\n\r\n        switch (msgObj.msg) {\r\n            case 'end':\r\n                setCardStates(state => {\r\n                    const { cards } = msgObj\r\n                    const { username } = state\r\n                    const othersCards = cards.filter(c => c.cardOwner !== '' && c.cardOwner !== username)\r\n                    const ownCards = state.ownCards\r\n                    let ownLastCard = ''\r\n                    if (ownLastCard.length > 0) {\r\n                        ownLastCard = ownCards[ownCards.length - 1].cardName\r\n                    }\r\n\r\n                    return {\r\n                        ...state,\r\n                        waitingForSword: '',\r\n                        endState: {\r\n                            cards,\r\n                            othersCards,\r\n                            ownCards: state.ownCards,\r\n                            selectOrder: { ...state.selectOrder },\r\n                            ownLastCard\r\n                        },\r\n                        cards: cardsArray(), //reset for new game --> keep endState visible\r\n                        othersCards: [],\r\n                        ownCards: [],\r\n                        selectOrder: {},\r\n                        soundPlayed: false\r\n                    }\r\n                })\r\n                console.log('ROUND END')\r\n                //--> set all cards this --> set ownCards & othersCards\r\n                return\r\n\r\n            case 'nosword':\r\n                //just nice to know i guesS? --> should trigger 'end' action\r\n                console.log(msgObj.username, 'NOSWORD')\r\n                return\r\n\r\n            case 'select':\r\n                console.log('select')\r\n                setCardStates(state => {\r\n                    const { cardIndex, cardOwner } = msgObj\r\n                    state.cards[cardIndex].cardOwner = cardOwner\r\n                    if (!state.selectOrder[cardOwner]) {\r\n                        state.selectOrder[cardOwner] = []\r\n                    }\r\n                    const playerOrderNew = [...state.selectOrder[cardOwner], cardIndex]\r\n\r\n                    const selectOrderNew = { ...state.selectOrder, [cardOwner]: playerOrderNew }\r\n\r\n                    return { ...state, selectOrder: selectOrderNew }\r\n                })\r\n                //use this to fill the cards array --> ownCards & othersCards to display on bottom side seperate\r\n                return\r\n            case 'forceEnd':\r\n                //just nice to know\r\n                console.log(msgObj.username, 'FORCE END')\r\n                setCardStates(state => {\r\n                    return {\r\n                        ...state,\r\n                        waitingForSword: '',\r\n                        endState: null,\r\n                        cards: cardsArray(), //reset for new game --> keep endState visible\r\n                        othersCards: [],\r\n                        ownCards: [],\r\n                        selectOrder: {},\r\n                        soundPlayed: false\r\n                    }\r\n                })\r\n                return\r\n            case 'too-many-users':\r\n                //nice to know --> could pop out alert if wanted to\r\n                console.log('TOO MANY USER SELECTED CARDS', msgObj.usernames)\r\n                return\r\n            case 'waiting-sword':\r\n                //display sword button to this player \r\n                setCardStates(state => {\r\n                    return {\r\n                        ...state,\r\n                        waitingForSword: msgObj.username\r\n                    }\r\n                })\r\n                return\r\n            case 'sword-change':\r\n                console.log(msgObj.doneBy, 'SWORD USER CHANGED TO', msgObj.username)\r\n                setCardStates(state => {\r\n                    return {\r\n                        ...state,\r\n                        swordOwner: msgObj.username\r\n                    }\r\n                })\r\n                return\r\n\r\n            default:\r\n                console.error('UNDEFINED SSE MSG', msgObj)\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error, data)\r\n    }\r\n}\r\n\r\n\r\nconst CardSubHandler = (setCardStates) => {\r\n    const cardSub = cardsService.cardsSSE()\r\n\r\n    cardSub.onopen = () => {\r\n        console.log('CARD SUB ACTIVE')\r\n    }\r\n    cardSub.onerror = () => {\r\n        console.error('CARD SUB ERROR')\r\n        cardSub.close()\r\n        setTimeout(() => CardSubHandler(setCardStates), (10 * 1000))\r\n    }\r\n    cardSub.onmessage = (event) => {\r\n        console.log('CSUB MSG')\r\n        sseMsgActions(event.data, setCardStates)\r\n    }\r\n    return cardSub\r\n}\r\n\r\nconst SwordUserSelector = ({ cardStates }) => {\r\n    const isSwordOwner = cardStates.swordOwner === cardStates.username\r\n\r\n    const handleChange = async (value) => {\r\n        const username = value\r\n        if (username === cardStates.swordOwner || !isSwordOwner) return\r\n\r\n        await usersService.changeSwordUser(username)\r\n    }\r\n\r\n    return (\r\n        <NativeSelector\r\n            value={cardStates.swordOwner}\r\n            valueOptions={cardStates.usernameOptions}\r\n            handleChange={handleChange}\r\n            label={'SwordOwner'}\r\n            disabled={!isSwordOwner}\r\n        />\r\n    )\r\n}\r\n\r\nconst cardsArray = () => {\r\n    let cardsArray = []\r\n    for (let i = 0; i < 24; i++) {\r\n        cardsArray.push({ cardName: '', cardOwner: '', cardIndex: i })\r\n    }\r\n    return cardsArray\r\n}\r\n\r\nconst defaultState = (username, usernameOptions) => ({\r\n    cards: cardsArray(),\r\n    ownCards: [],\r\n    othersCards: [],\r\n    waitingForSword: '', //username who's sword we are waiting\r\n    swordOwner: '',\r\n    usernameOptions: usernameOptions,\r\n    username: username,\r\n    selectOrder: {},\r\n    endState: null,\r\n    soundPlayed: false\r\n})\r\n\r\nconst TideCards = ({ username, usernameOptions, logout }) => {\r\n    const [cardStates, setCardStates] = useState(() => defaultState(username, usernameOptions))\r\n\r\n    const isFrozeState = !!cardStates.endState\r\n    let { cards, ownCards, othersCards } = (cardStates.endState) ? cardStates.endState : cardStates\r\n\r\n    useEffect(() => {\r\n        const initThing = async () => {\r\n            const data = await cardsService.initialLoad()\r\n            const { swordOwner, ownCards, othersCards } = data\r\n            const selectedCards = [...ownCards, ...othersCards]\r\n\r\n            setCardStates(state => {\r\n                const cards = state.cards\r\n                selectedCards.forEach(c => {\r\n                    const { cardOwner, cardIndex } = c\r\n                    cards[cardIndex].cardOwner = cardOwner\r\n                })\r\n                return {\r\n                    ...state,\r\n                    cards,\r\n                    swordOwner,\r\n                    ownCards,\r\n                    othersCards\r\n                }\r\n            })\r\n        }\r\n        initThing()\r\n        const cardSub = CardSubHandler(setCardStates)\r\n\r\n        return () => cardSub.close()\r\n    }, [])\r\n\r\n    const handleCardSelect = async (cardIndex) => {\r\n        if (isFrozeState) return\r\n        const { username, swordOwner, cards } = cardStates\r\n\r\n        const card = cards[cardIndex]\r\n        if (card.cardOwner !== '') return //should prevent selecting alreadt selected card --> check done in backend too\r\n\r\n        //the rest of the picks are not preventend in backend atm.\r\n\r\n        //check if non swordowner tries to pick a 2nd\r\n        const selectedCards = cards.filter(c => c.cardOwner !== '')\r\n        const ownCardsFiltered = selectedCards.filter(c => c.cardOwner === username)\r\n        //0 selected --> no checks\r\n\r\n        //1 selected --> prevent if its yours\r\n        if (selectedCards.length === 1 && ownCardsFiltered.length === 1) return\r\n\r\n        //2 selected --> prevent from picking unless you are one of the 2 and have sword\r\n        if ((selectedCards.length === 2) && (ownCardsFiltered.length !== 1 || swordOwner !== username)) return\r\n\r\n        const cardInfo = await cardsService.select(cardIndex)\r\n        if (!cardInfo) return //should mean card is already selected by someone\r\n\r\n        setCardStates(state => {\r\n            return {\r\n                ...state,\r\n                ownCards: [...state.ownCards, cardInfo]\r\n            }\r\n        })\r\n    }\r\n\r\n    const refresh = () => {\r\n        setCardStates(state => ({ ...state, endState: null }))\r\n    }\r\n\r\n    const handleSwordSkip = async () => {\r\n        if (isFrozeState) return\r\n\r\n        if ((cardStates.swordOwner !== username)) return\r\n        await cardsService.nosword()\r\n    }\r\n\r\n    const forceReset = async () => {\r\n        if (isFrozeState) return\r\n\r\n        await cardsService.forceEnd()\r\n    }\r\n\r\n    const cardComps = cards.map((card) => {\r\n        return <TideCard key={card.cardIndex} username={username} card={card} handleSelect={handleCardSelect} />\r\n    })\r\n\r\n\r\n\r\n    const otherPlayers = Object.keys(othersCards.reduce((obj, card) => {\r\n        obj[card.cardOwner] = card.cardOwner\r\n        return obj\r\n    }, {}))\r\n\r\n    const otherPlayersCards = otherPlayers.reduce((obj, player) => {\r\n        const playerCards = othersCards.filter(c => c.cardOwner === player)\r\n\r\n        let playerCardsOrdered = [...playerCards]\r\n        const playerSelectOrder = cardStates?.endState?.selectOrder[player]\r\n        const orderKnown = playerSelectOrder && playerSelectOrder.length === playerCards.length\r\n        if (orderKnown) {\r\n            playerCardsOrdered = playerSelectOrder.map(selectNumb => playerCards.find(c => c.cardIndex === selectNumb))\r\n        } else {\r\n            console.log('ORDER NOT KNOWN', player)\r\n        }\r\n        obj[player] = { cards: playerCardsOrdered, orderKnown, playerName: player }\r\n        return obj\r\n    }, {})\r\n\r\n\r\n    const ownCardComps = ownCards.map((card) => <TideCard key={card.cardIndex} username={username} card={card} handleSelect={null} className='tidecard-small' />)\r\n\r\n    const otherPlayersOrdered = Object.values(otherPlayersCards)\r\n    const othersCardsComps = otherPlayersOrdered.map((data) => {\r\n        const cardsComp = data.cards.map(c => <TideCard key={c.cardIndex} username={username} card={c} handleSelect={null} className='tidecard-small' />)\r\n        return (\r\n            <div key={data.playerName} style={{ borderRight: '3px solid black', paddingRight: 3 }}>\r\n                <div key={data.playerName} className='player-cards-holder' >\r\n                    {cardsComp}\r\n                </div>\r\n                OrderKnwon: {data.orderKnown + ''}\r\n            </div>\r\n        )\r\n    })\r\n\r\n    const isSwordOwner = (cardStates.swordOwner === username)\r\n\r\n    let isSwordBtnEnabled = false\r\n    if (isSwordOwner) {\r\n        //check if 2 cards are selected and 1 is yours \r\n        //--> waiting for you to decide if you use the sword or not\r\n        const selectedCards = cardStates.cards.filter(c => c.cardOwner !== '')\r\n        const ownCards = selectedCards.filter(c => c.cardOwner === username)\r\n        if (selectedCards.length === 2 && ownCards.length === 1) {\r\n            isSwordBtnEnabled = true\r\n        }\r\n    }\r\n    \r\n    const playSound = () => {\r\n        try {\r\n            const audioEl = document.getElementsByClassName('taDa')[0]\r\n            audioEl.play()\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    if (isFrozeState && !cardStates.soundPlayed) {\r\n        const frozenOwnCards = cardStates.endState?.ownCards || []\r\n        console.log(cardStates)\r\n        if (frozenOwnCards.length > 0) {\r\n            const lastOwnName = frozenOwnCards[frozenOwnCards.length - 1].cardName\r\n            if(lastOwnName === 'zero_skull') {\r\n                playSound()\r\n                setCardStates(state => ({ ...state, soundPlayed: true}))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={playSound}>PLAY</button>\r\n            <audio className='taDa' >\r\n                <source src={taDa}></source>\r\n            </audio>\r\n            <div style={{ display: 'flex' }}>\r\n                <button onClick={() => logout()} >Logout - {username}</button>\r\n                <SwordUserSelector cardStates={cardStates} />\r\n                <button disabled={!cardStates.endState} onClick={refresh} >REFRESH</button>\r\n            </div>\r\n            <div style={{ display: 'grid' }}>\r\n                <div className='player-cards-holder' >\r\n                    {cardComps}\r\n                </div>\r\n                {isSwordOwner &&\r\n                    <button disabled={!isSwordBtnEnabled} onClick={handleSwordSkip}>\r\n                        DONT USE SWORD\r\n                    </button>}\r\n                <div>\r\n                    <div className='player-cards-holder' >\r\n                        {ownCardComps}\r\n                        <div className='divider'></div>\r\n                        {othersCardsComps}\r\n                    </div>\r\n                </div>\r\n                <div style={{ height: 55 }}></div>\r\n                {isSwordOwner &&\r\n                    <button onClick={forceReset} disabled={isFrozeState}>\r\n                        FORCE RESET - FOR BUGS ONLY\r\n                    </button>}\r\n            </div >\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default TideCards","import { useState, useEffect } from 'react'\r\nimport TideCards from 'components/TideCards'\r\nimport NativeSelector from 'components/NativeSelector'\r\nimport usersService from 'services/users'\r\nimport './App.css'\r\n\r\nimport tokenManager from 'services/tokenManager'\r\n\r\nconst saveUser = (username, token) => {\r\n    localStorage.setItem('Username', username)\r\n    localStorage.setItem('Token', token)\r\n}\r\nconst getDefaultUser = () => {\r\n    const storedUser = localStorage.getItem('Username')\r\n    const Token = localStorage.getItem('Token')\r\n\r\n    if (!storedUser || !Token) return ''\r\n\r\n    tokenManager.setToken(Token)\r\n    return storedUser\r\n}\r\n\r\n\r\n\r\nconst LoginScreen = ({ username, setUsername, usernameOptions }) => {\r\n    const handleChange = async (value) => {\r\n        const username = value\r\n        if (!username || username === 'None') return\r\n\r\n        const token = await usersService.login(username)\r\n        if (!token) {\r\n            console.log('login failed')\r\n            return\r\n        }\r\n\r\n        saveUser(username, token) //update localStorage\r\n        setUsername(username) //update state\r\n    }\r\n\r\n    return (\r\n        <NativeSelector\r\n            value={username}\r\n            valueOptions={usernameOptions}\r\n            handleChange={handleChange}\r\n            label={'Username'}\r\n        />\r\n    )\r\n}\r\n\r\nconst App = () => {\r\n    const [username, setUsername] = useState(() => getDefaultUser())\r\n    const [usernameOptions, setUsernameOptions] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchUsernames = async () => {\r\n            const usernames = await usersService.usernames()\r\n            setUsernameOptions(usernames)\r\n        }\r\n        fetchUsernames()\r\n    }, [])\r\n\r\n    if (!username) {\r\n        return (\r\n            <div className='App'>\r\n                <LoginScreen username={username} setUsername={setUsername} usernameOptions={usernameOptions} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const logout = () => {\r\n        localStorage.clear()\r\n        setUsername('')\r\n    }\r\n\r\n    return (\r\n        <div className='App'>\r\n            {usernameOptions.length > 0 ? //wait till username options are fetched\r\n                <TideCards logout={logout} username={username} usernameOptions={usernameOptions} />\r\n                :\r\n                'Loading...'\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}